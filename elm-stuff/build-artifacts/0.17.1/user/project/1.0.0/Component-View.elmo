var _user$project$Component_View$square = function (size) {
	return A2(_Kwarrtz$render$Graphics_Render$rectangle, size, size);
};
var _user$project$Component_View$coloredSquard = function (color) {
	return A2(
		_Kwarrtz$render$Graphics_Render$solidFill,
		color,
		_user$project$Component_View$square(_user$project$Component_Type$size));
};
var _user$project$Component_View$empty$ = _user$project$Component_View$coloredSquard(_elm_lang$core$Color$lightGrey);
var _user$project$Component_View$wall = _user$project$Component_View$coloredSquard(_user$project$General_Color$wall);
var _user$project$Component_View$floor$ = A2(
	_Kwarrtz$render$Graphics_Render$solidFill,
	_user$project$General_Color$floor$,
	_user$project$Component_View$square(_user$project$Component_Type$size));
var _user$project$Component_View$goal = _Kwarrtz$render$Graphics_Render$group(
	_elm_lang$core$Native_List.fromArray(
		[
			_user$project$Component_View$floor$,
			A2(
			_Kwarrtz$render$Graphics_Render$solidFill,
			_user$project$General_Color$goal,
			_Kwarrtz$render$Graphics_Render$circle(_user$project$Component_Type$size / 6))
		]));
var _user$project$Component_View$player = _Kwarrtz$render$Graphics_Render$group(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_Kwarrtz$render$Graphics_Render$solidFill,
			_user$project$General_Color$playerBorder,
			_Kwarrtz$render$Graphics_Render$circle((_user$project$Component_Type$size / 2) - 3)),
			A2(
			_Kwarrtz$render$Graphics_Render$solidFill,
			_user$project$General_Color$player,
			_Kwarrtz$render$Graphics_Render$circle((_user$project$Component_Type$size / 2) - 6))
		]));
var _user$project$Component_View$box = function (inGoal) {
	var boxColor = inGoal ? _user$project$General_Color$boxWithGoal : _user$project$General_Color$box;
	return _Kwarrtz$render$Graphics_Render$group(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_Kwarrtz$render$Graphics_Render$solidFill,
				_user$project$General_Color$boxBorder,
				_user$project$Component_View$square(_user$project$Component_Type$size - 3)),
				A2(
				_Kwarrtz$render$Graphics_Render$solidFill,
				boxColor,
				_user$project$Component_View$square(_user$project$Component_Type$size - 10))
			]));
};
var _user$project$Component_View$view = function (component) {
	var _p0 = component;
	switch (_p0.ctor) {
		case 'Box':
			return _user$project$Component_View$box(_p0._0);
		case 'Floor':
			return _user$project$Component_View$floor$;
		case 'Wall':
			return _user$project$Component_View$wall;
		case 'Goal':
			return _user$project$Component_View$goal;
		case 'Player':
			return _user$project$Component_View$player;
		default:
			return _user$project$Component_View$empty$;
	}
};
var _user$project$Component_View$render = F2(
	function (location, component) {
		return A2(
			_Kwarrtz$render$Graphics_Render$position,
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Basics$toFloat(
					_chendrix$elm_matrix$Matrix$col(location)) * _user$project$Component_Type$size,
				_1: _elm_lang$core$Basics$toFloat(
					_chendrix$elm_matrix$Matrix$row(location)) * _user$project$Component_Type$size
			},
			_user$project$Component_View$view(component));
	});
